trigger:
  batch: true
  branches:
    include:
    - 'master'
  paths:
    include:
    - src/scaffolders/power-platform/*

pool:
  vmImage: windows-latest

parameters:
  - name: adoAccountName
    displayName : The domain name of the Azure DevOps instance
    type: string
  - name: adoProjectName
    displayName : The name of the Project to scaffold within Azure DevOps
    type: string
  - name: customer
    displayName : The name of the Customer
    type: string
  - name: customerProject
    displayName : The name of the customer internal project
    type: string
  - name: serviceEndPointTenantId
    displayName : The tenantId (Guid)
    type: string
  - name: serviceEndPointClientId
    displayName : The clientId / applicationId from the application registration in Azure AD (Guid)
    type: string
  - name: serviceEndPointSecret
    displayName : The secret for client / application registered app from Azure AD (Guid)
    type: string
  - name: serviceClientUrl
    displayName : The url of the extract environment to run the solution
    type: string
  - name: releaseEnvironments
    displayName : The comma seperated list of environments for releases e.g TST,PRE,PRD
    type: string

steps:
- checkout: self
  persistCredentials: true
  
- task: PowerShell@2
  displayName : 'Install Template'
  inputs:
    targetType: 'inline'
    script: 'dotnet new --install .'
    workingDirectory: '$(system.defaultworkingdirectory)/src/scaffolders/power-platform/PowerApps/template'

- task: PowerShell@2
  displayName : 'Create Scaffold temporary directory'
  inputs:
    targetType: 'inline'
    script: 'mkdir ScaffoldTemp'
    workingDirectory: '$(system.defaultworkingdirectory)'

- task: PowerShell@2
  displayName : 'Run Scaffold from temp directory'
  inputs:
    targetType: 'inline'
    script: 'dotnet new Capgemini.PowerApps.Scaffolder -n ${{ parameters.customer}}.${{ parameters.customerProject }} --patToken $(PATToken) --repositoryName ${{ parameters.customer}}.${{ parameters.customerProject }} --adoAccountName ${{ parameters.adoAccountName}} --adoProjectName ${{ parameters.adoProjectName}} --serviceEndPointClientId ${{ parameters.serviceEndPointClientId }} --serviceEndPointSecret ${{ parameters.serviceEndPointSecret }} --serviceClientUrl ${{ parameters.serviceClientUrl }} --serviceEndPointTenantId ${{ parameters.serviceEndPointTenantId }} --allow-scripts yes'
    pwsh: true
    workingDirectory: '$(system.defaultworkingdirectory)/ScaffoldTemp'
    runScriptInSeparateScope: true