@page "/Libraries"
@using Capgemini.CapabilityCatalog.Server.Services;
@using Capgemini.CapabilityCatalog.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Capgemini.CapabilityCatalog.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization

@inject NavigationManager Navigation
@attribute [Authorize]
@inject HttpClient Http
@inject ICapabilityDataService service
@inject DialogService dialogService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

@if (packageItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@packageItems" TItem="Library" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Library" Property="Name" Title="Name">
                <Template Context="data">
                    <a href="@data.Url" target="_blank">@data.Name</a>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Library" Property="Description" Width="50" Title="Description" />
            <RadzenDataGridColumn TItem="Library" Property="PackageType" Width="80" Title="Package Feed / Type" />
            <RadzenDataGridColumn TItem="Library" Property="Downloads" Width="80" FormatString="{0:N0}" Title="Downloads" />
         
            <RadzenDataGridColumn TItem="Library" Width="40" Property="RepoUrl" Title="Source Code">
                <Template Context="data">
                    <a href="@data.RepoUrl" target="_blank">link</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Library" Width="40" Property="RepoUrl" Title="View Stats">
                <Template Context="data">
                    <RadzenButton Click="()=> CallMe(data)" Text="Stats"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


 

}

@code {
    private IEnumerable<Library>? packageItems;

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions()
            {
                ReferenceHandler = ReferenceHandler.Preserve,
                PropertyNameCaseInsensitive = true
            };


        packageItems = await Load();

    }

    protected async void CallMe(Library lib)
    {
        var dialogResult = await dialogService.OpenAsync<LibraryStats>("", new Dictionary<string, object>() { { "Library", lib } });

        await InvokeAsync(() => { StateHasChanged(); });

    }


    public async void onDetailRecordSaved(string message)
    {
        packageItems = await Load();
    }

    public async Task<IEnumerable<Library>?> Load()
    {
        return await service.GetPackages();
    }

}

