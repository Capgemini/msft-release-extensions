@page "/Component/{Id}"
@layout MainLayout
@using Radzen
@using System.Text.Json

<RadzenContent Container="main">


        <RadzenTemplateForm TItem="Scaffolder" Data="@scaffolder" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
                    <ChildContent>    
                        
                        <RadzenLabel Text="Name" Component="Title"></RadzenLabel>
                        <RadzenTextBox style="display: block" Name="Name" @bind-Value="@scaffolder.Name" class="w-100" />
                        <RadzenRequiredValidator Component="Name" Text="Required" Popup="true" Style="position: absolute" />

                @{                  
                    foreach (var item in @scaffolder.Parameters)
                    {
                        <RadzenLabel Text="@item.Name" Component="Title"></RadzenLabel>
                        <RadzenTextBox style="display: block" Name="@item.Name.GetHashCode().ToString()" @bind-Value="@item.Value" class="w-100" />
                        <RadzenRequiredValidator Component="@item.Name.GetHashCode().ToString()" Text="Required" Popup="true" Style="position: absolute" />
                    }
                }

           
            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </ChildContent>

              

                </RadzenTemplateForm>


 

 

</RadzenContent>

<EventConsole @ref=@console />

@code {

    [Parameter]

    public dynamic Id { get; set; }   

    [Parameter] 

    public EventCallback<string> OnSave { get; set; }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await Load();
    }

    protected async System.Threading.Tasks.Task Load()
    {
        _scaffolder = Id;
    }

    Scaffolder _scaffolder;
    protected Scaffolder scaffolder
    {
        get
        {
            return _scaffolder;
        }
        set
        {
            if (!object.Equals(_scaffolder, value))
            {
                _scaffolder = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    EventConsole console;

    void OnSubmit(Scaffolder model)
    {
        console.Log($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    //private async Task  ExecuteScaffolder()
    //{
    //    var res = _scaffolder;

    //   await  OnSave.InvokeAsync("refresh");        
    //}

}
