@page "/Component/{Id}"
@layout MainLayout

<RadzenContent Container="main">
    <ChildContent>
       
                <RadzenTemplateForm TItem="Scaffolder" Data="@scaffolder">
                    <ChildContent>    
                        
                        <RadzenLabel Text="@scaffolder.Name" Component="Title" style="width: 100%">
                                    </RadzenLabel>

                <RadzenTextBox style="display: block" Name="@scaffolder.Name.GetHashCode().ToString()" @bind-Value="@scaffolder.Name" class="w-100" />
                <RadzenRequiredValidator Component="scaffolder.Name.GetHashCode().ToString()" Text="Required" Popup="true" Style="position: absolute" />

                @{                  
                    foreach (var item in @scaffolder.Parameters)
                                {
                                    <RadzenLabel Text="@item.Name" Component="Title" style="width: 100%">
                                    </RadzenLabel>

                                    <RadzenTextBox style="display: block" Name="@item.Name.GetHashCode().ToString()" @bind-Value="@item.Name" class="w-100" />
                        <RadzenRequiredValidator Component="@item.Name.GetHashCode().ToString()" Text="Required" Popup="true" Style="position: absolute" />

                                }
                            }
                    </ChildContent>
                </RadzenTemplateForm>

        <RadzenButton ButtonStyle="ButtonStyle.Success" Shade="Shade.Default" Click="ExecuteScaffolder"  Text="Run" /> 
        
        <RadzenButton ButtonStyle="ButtonStyle.Warning" Shade="Shade.Default"  Text="Cancel" /> 

    </ChildContent>

</RadzenContent>

@code {

    [Parameter]

    public dynamic Id { get; set; }   

    [Parameter] 
    
    public EventCallback<string> OnSave { get; set; }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await Load();
    }

    protected async System.Threading.Tasks.Task Load()
    {
        _scaffolder = Id;
    }

    Scaffolder _scaffolder;
    protected Scaffolder scaffolder
    {
        get
        {
            return _scaffolder;
        }
        set
        {
            if (!object.Equals(_scaffolder, value))
            {
                _scaffolder = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    private async Task  ExecuteScaffolder()
    {
        var res = _scaffolder;

       await  OnSave.InvokeAsync("refresh");        
    }

}
