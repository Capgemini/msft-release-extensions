@page "/"
@using Capgemini.CapabilityCatalog.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Capgemini.CapabilityCatalog.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@attribute [Authorize]
@inject HttpClient Http
@inject DialogService dialogService

<PageTitle>Home</PageTitle>

@if (scaffolders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" RowSelect="@Grid0RowSelect"
                Data="@scaffolders" TItem="Scaffolder" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Scaffolder" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="Scaffolder" Property="Description" Title="Description"/>
           @* <RadzenDataGridColumn Width="70px" TItem="Scaffolder" Title="" Filterable="false">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Default" class="m-1" Click="ShowDetailedView" Text="Explore" />
                </Template>
            </RadzenDataGridColumn>*@
        </Columns>
    </RadzenDataGrid>
    
}

@code {
    private Scaffolder[]? scaffolders;


    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions()
    {
        ReferenceHandler = ReferenceHandler.Preserve,
        PropertyNameCaseInsensitive = true
    };

        try
        {
            scaffolders = await Load();
         }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    protected async System.Threading.Tasks.Task Grid0RowSelect(Scaffolder args)
    {
        //Automapper
        var obj = new Scaffolder
            {
                Name = args.Name,
                Description = args.Description,
                Parameters = args.Parameters
            };

        var dialogResult = await dialogService.OpenAsync<RunScaffold>("", new Dictionary<string, object>() { { "Id", obj }, {"OnSave", EventCallback.Factory.Create<string>(this,onDetailRecordSaved) } });

        await InvokeAsync(() => { StateHasChanged(); });
    }

    public async void onDetailRecordSaved(string message)
    {
        scaffolders = await Load();
    }

    public async Task<Scaffolder[]?> Load()
    {
         return await Http.GetFromJsonAsync<Scaffolder[]>("Scaffolder");
    }

}

